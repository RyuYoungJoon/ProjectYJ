// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class EnterChatRoomAck;
struct EnterChatRoomAckDefaultTypeInternal;
extern EnterChatRoomAckDefaultTypeInternal _EnterChatRoomAck_default_instance_;
class EnterChatRoomReq;
struct EnterChatRoomReqDefaultTypeInternal;
extern EnterChatRoomReqDefaultTypeInternal _EnterChatRoomReq_default_instance_;
class PacketHeader;
struct PacketHeaderDefaultTypeInternal;
extern PacketHeaderDefaultTypeInternal _PacketHeader_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::EnterChatRoomAck* Arena::CreateMaybeMessage<::Protocol::EnterChatRoomAck>(Arena*);
template<> ::Protocol::EnterChatRoomReq* Arena::CreateMaybeMessage<::Protocol::EnterChatRoomReq>(Arena*);
template<> ::Protocol::PacketHeader* Arena::CreateMaybeMessage<::Protocol::PacketHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum PacketType : int {
  None = 0,
  PKT_EnterChatRoomReq = 1001,
  PKT_EnterChatRoomAck = 1002,
  PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketType_IsValid(int value);
constexpr PacketType PacketType_MIN = None;
constexpr PacketType PacketType_MAX = PKT_EnterChatRoomAck;
constexpr int PacketType_ARRAYSIZE = PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketType_descriptor();
template<typename T>
inline const std::string& PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketType_descriptor(), enum_t_value);
}
inline bool PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketType>(
    PacketType_descriptor(), name, value);
}
// ===================================================================

class PacketHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PacketHeader) */ {
 public:
  inline PacketHeader() : PacketHeader(nullptr) {}
  ~PacketHeader() override;
  explicit constexpr PacketHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketHeader(const PacketHeader& from);
  PacketHeader(PacketHeader&& from) noexcept
    : PacketHeader() {
    *this = ::std::move(from);
  }

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketHeader& operator=(PacketHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketHeader* internal_default_instance() {
    return reinterpret_cast<const PacketHeader*>(
               &_PacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketHeader& a, PacketHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketHeader* New() const final {
    return new PacketHeader();
  }

  PacketHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PacketHeader";
  }
  protected:
  explicit PacketHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kPacketSizeFieldNumber = 2,
    kSeqNumFieldNumber = 3,
  };
  // uint32 packetType = 1;
  void clear_packettype();
  ::PROTOBUF_NAMESPACE_ID::uint32 packettype() const;
  void set_packettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packettype() const;
  void _internal_set_packettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 packetSize = 2;
  void clear_packetsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 packetsize() const;
  void set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packetsize() const;
  void _internal_set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 seqNum = 3;
  void clear_seqnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 seqnum() const;
  void set_seqnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seqnum() const;
  void _internal_set_seqnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PacketHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packettype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packetsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seqnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class EnterChatRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.EnterChatRoomReq) */ {
 public:
  inline EnterChatRoomReq() : EnterChatRoomReq(nullptr) {}
  ~EnterChatRoomReq() override;
  explicit constexpr EnterChatRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterChatRoomReq(const EnterChatRoomReq& from);
  EnterChatRoomReq(EnterChatRoomReq&& from) noexcept
    : EnterChatRoomReq() {
    *this = ::std::move(from);
  }

  inline EnterChatRoomReq& operator=(const EnterChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterChatRoomReq& operator=(EnterChatRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterChatRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterChatRoomReq* internal_default_instance() {
    return reinterpret_cast<const EnterChatRoomReq*>(
               &_EnterChatRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnterChatRoomReq& a, EnterChatRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterChatRoomReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterChatRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterChatRoomReq* New() const final {
    return new EnterChatRoomReq();
  }

  EnterChatRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterChatRoomReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterChatRoomReq& from);
  void MergeFrom(const EnterChatRoomReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterChatRoomReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.EnterChatRoomReq";
  }
  protected:
  explicit EnterChatRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kMessageFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated int32 items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_items() const;
  void _internal_add_items(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_items();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 items(int index) const;
  void set_items(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_items(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_items();

  // int32 message = 1;
  void clear_message();
  ::PROTOBUF_NAMESPACE_ID::int32 message() const;
  void set_message(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message() const;
  void _internal_set_message(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.EnterChatRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > items_;
  mutable std::atomic<int> _items_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class EnterChatRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.EnterChatRoomAck) */ {
 public:
  inline EnterChatRoomAck() : EnterChatRoomAck(nullptr) {}
  ~EnterChatRoomAck() override;
  explicit constexpr EnterChatRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterChatRoomAck(const EnterChatRoomAck& from);
  EnterChatRoomAck(EnterChatRoomAck&& from) noexcept
    : EnterChatRoomAck() {
    *this = ::std::move(from);
  }

  inline EnterChatRoomAck& operator=(const EnterChatRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterChatRoomAck& operator=(EnterChatRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterChatRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterChatRoomAck* internal_default_instance() {
    return reinterpret_cast<const EnterChatRoomAck*>(
               &_EnterChatRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EnterChatRoomAck& a, EnterChatRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterChatRoomAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterChatRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterChatRoomAck* New() const final {
    return new EnterChatRoomAck();
  }

  EnterChatRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterChatRoomAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterChatRoomAck& from);
  void MergeFrom(const EnterChatRoomAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterChatRoomAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.EnterChatRoomAck";
  }
  protected:
  explicit EnterChatRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.EnterChatRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketHeader

// uint32 packetType = 1;
inline void PacketHeader::clear_packettype() {
  packettype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::_internal_packettype() const {
  return packettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::packettype() const {
  // @@protoc_insertion_point(field_get:Protocol.PacketHeader.packetType)
  return _internal_packettype();
}
inline void PacketHeader::_internal_set_packettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packettype_ = value;
}
inline void PacketHeader::set_packettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packettype(value);
  // @@protoc_insertion_point(field_set:Protocol.PacketHeader.packetType)
}

// uint32 packetSize = 2;
inline void PacketHeader::clear_packetsize() {
  packetsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::_internal_packetsize() const {
  return packetsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::packetsize() const {
  // @@protoc_insertion_point(field_get:Protocol.PacketHeader.packetSize)
  return _internal_packetsize();
}
inline void PacketHeader::_internal_set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packetsize_ = value;
}
inline void PacketHeader::set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packetsize(value);
  // @@protoc_insertion_point(field_set:Protocol.PacketHeader.packetSize)
}

// uint32 seqNum = 3;
inline void PacketHeader::clear_seqnum() {
  seqnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::_internal_seqnum() const {
  return seqnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::seqnum() const {
  // @@protoc_insertion_point(field_get:Protocol.PacketHeader.seqNum)
  return _internal_seqnum();
}
inline void PacketHeader::_internal_set_seqnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seqnum_ = value;
}
inline void PacketHeader::set_seqnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:Protocol.PacketHeader.seqNum)
}

// -------------------------------------------------------------------

// EnterChatRoomReq

// int32 message = 1;
inline void EnterChatRoomReq::clear_message() {
  message_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterChatRoomReq::_internal_message() const {
  return message_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterChatRoomReq::message() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterChatRoomReq.message)
  return _internal_message();
}
inline void EnterChatRoomReq::_internal_set_message(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_ = value;
}
inline void EnterChatRoomReq::set_message(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:Protocol.EnterChatRoomReq.message)
}

// int32 value = 2;
inline void EnterChatRoomReq::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterChatRoomReq::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterChatRoomReq::value() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterChatRoomReq.value)
  return _internal_value();
}
inline void EnterChatRoomReq::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void EnterChatRoomReq::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Protocol.EnterChatRoomReq.value)
}

// repeated int32 items = 3;
inline int EnterChatRoomReq::_internal_items_size() const {
  return items_.size();
}
inline int EnterChatRoomReq::items_size() const {
  return _internal_items_size();
}
inline void EnterChatRoomReq::clear_items() {
  items_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterChatRoomReq::_internal_items(int index) const {
  return items_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterChatRoomReq::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.EnterChatRoomReq.items)
  return _internal_items(index);
}
inline void EnterChatRoomReq::set_items(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.EnterChatRoomReq.items)
}
inline void EnterChatRoomReq::_internal_add_items(::PROTOBUF_NAMESPACE_ID::int32 value) {
  items_.Add(value);
}
inline void EnterChatRoomReq::add_items(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_items(value);
  // @@protoc_insertion_point(field_add:Protocol.EnterChatRoomReq.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EnterChatRoomReq::_internal_items() const {
  return items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EnterChatRoomReq::items() const {
  // @@protoc_insertion_point(field_list:Protocol.EnterChatRoomReq.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EnterChatRoomReq::_internal_mutable_items() {
  return &items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EnterChatRoomReq::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.EnterChatRoomReq.items)
  return _internal_mutable_items();
}

// -------------------------------------------------------------------

// EnterChatRoomAck

// uint32 id = 1;
inline void EnterChatRoomAck::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterChatRoomAck::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterChatRoomAck::id() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterChatRoomAck.id)
  return _internal_id();
}
inline void EnterChatRoomAck::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void EnterChatRoomAck::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.EnterChatRoomAck.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PacketType>() {
  return ::Protocol::PacketType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
