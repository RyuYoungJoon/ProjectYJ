// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class EnterChatRoomAck;
struct EnterChatRoomAckDefaultTypeInternal;
extern EnterChatRoomAckDefaultTypeInternal _EnterChatRoomAck_default_instance_;
class EnterChatRoomReq;
struct EnterChatRoomReqDefaultTypeInternal;
extern EnterChatRoomReqDefaultTypeInternal _EnterChatRoomReq_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class PacketHeader;
struct PacketHeaderDefaultTypeInternal;
extern PacketHeaderDefaultTypeInternal _PacketHeader_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::EnterChatRoomAck* Arena::CreateMaybeMessage<::Protocol::EnterChatRoomAck>(Arena*);
template<> ::Protocol::EnterChatRoomReq* Arena::CreateMaybeMessage<::Protocol::EnterChatRoomReq>(Arena*);
template<> ::Protocol::Packet* Arena::CreateMaybeMessage<::Protocol::Packet>(Arena*);
template<> ::Protocol::PacketHeader* Arena::CreateMaybeMessage<::Protocol::PacketHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum PacketType : int {
  None = 0,
  PKT_EnterChatRoomReq = 1001,
  PKT_EnterChatRoomAck = 1002,
  PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketType_IsValid(int value);
constexpr PacketType PacketType_MIN = None;
constexpr PacketType PacketType_MAX = PKT_EnterChatRoomAck;
constexpr int PacketType_ARRAYSIZE = PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketType_descriptor();
template<typename T>
inline const std::string& PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketType_descriptor(), enum_t_value);
}
inline bool PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketType>(
    PacketType_descriptor(), name, value);
}
// ===================================================================

class PacketHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PacketHeader) */ {
 public:
  inline PacketHeader() : PacketHeader(nullptr) {}
  ~PacketHeader() override;
  explicit constexpr PacketHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketHeader(const PacketHeader& from);
  PacketHeader(PacketHeader&& from) noexcept
    : PacketHeader() {
    *this = ::std::move(from);
  }

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketHeader& operator=(PacketHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketHeader* internal_default_instance() {
    return reinterpret_cast<const PacketHeader*>(
               &_PacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketHeader& a, PacketHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketHeader* New() const final {
    return new PacketHeader();
  }

  PacketHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PacketHeader";
  }
  protected:
  explicit PacketHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
    kPacketSizeFieldNumber = 2,
    kSeqNumFieldNumber = 3,
  };
  // uint32 packetType = 1;
  void clear_packettype();
  ::PROTOBUF_NAMESPACE_ID::uint32 packettype() const;
  void set_packettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packettype() const;
  void _internal_set_packettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 packetSize = 2;
  void clear_packetsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 packetsize() const;
  void set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packetsize() const;
  void _internal_set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 seqNum = 3;
  void clear_seqnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 seqnum() const;
  void set_seqnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seqnum() const;
  void _internal_set_seqnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PacketHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packettype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packetsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seqnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class EnterChatRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.EnterChatRoomReq) */ {
 public:
  inline EnterChatRoomReq() : EnterChatRoomReq(nullptr) {}
  ~EnterChatRoomReq() override;
  explicit constexpr EnterChatRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterChatRoomReq(const EnterChatRoomReq& from);
  EnterChatRoomReq(EnterChatRoomReq&& from) noexcept
    : EnterChatRoomReq() {
    *this = ::std::move(from);
  }

  inline EnterChatRoomReq& operator=(const EnterChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterChatRoomReq& operator=(EnterChatRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterChatRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterChatRoomReq* internal_default_instance() {
    return reinterpret_cast<const EnterChatRoomReq*>(
               &_EnterChatRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnterChatRoomReq& a, EnterChatRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterChatRoomReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterChatRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterChatRoomReq* New() const final {
    return new EnterChatRoomReq();
  }

  EnterChatRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterChatRoomReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterChatRoomReq& from);
  void MergeFrom(const EnterChatRoomReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterChatRoomReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.EnterChatRoomReq";
  }
  protected:
  explicit EnterChatRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kMessageFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // .Protocol.PacketHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Protocol::PacketHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PacketHeader* release_header();
  ::Protocol::PacketHeader* mutable_header();
  void set_allocated_header(::Protocol::PacketHeader* header);
  private:
  const ::Protocol::PacketHeader& _internal_header() const;
  ::Protocol::PacketHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Protocol::PacketHeader* header);
  ::Protocol::PacketHeader* unsafe_arena_release_header();

  // int32 message = 2;
  void clear_message();
  ::PROTOBUF_NAMESPACE_ID::int32 message() const;
  void set_message(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message() const;
  void _internal_set_message(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.EnterChatRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PacketHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class EnterChatRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.EnterChatRoomAck) */ {
 public:
  inline EnterChatRoomAck() : EnterChatRoomAck(nullptr) {}
  ~EnterChatRoomAck() override;
  explicit constexpr EnterChatRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterChatRoomAck(const EnterChatRoomAck& from);
  EnterChatRoomAck(EnterChatRoomAck&& from) noexcept
    : EnterChatRoomAck() {
    *this = ::std::move(from);
  }

  inline EnterChatRoomAck& operator=(const EnterChatRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterChatRoomAck& operator=(EnterChatRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterChatRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterChatRoomAck* internal_default_instance() {
    return reinterpret_cast<const EnterChatRoomAck*>(
               &_EnterChatRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EnterChatRoomAck& a, EnterChatRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterChatRoomAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterChatRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterChatRoomAck* New() const final {
    return new EnterChatRoomAck();
  }

  EnterChatRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterChatRoomAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterChatRoomAck& from);
  void MergeFrom(const EnterChatRoomAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterChatRoomAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.EnterChatRoomAck";
  }
  protected:
  explicit EnterChatRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // .Protocol.PacketHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Protocol::PacketHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PacketHeader* release_header();
  ::Protocol::PacketHeader* mutable_header();
  void set_allocated_header(::Protocol::PacketHeader* header);
  private:
  const ::Protocol::PacketHeader& _internal_header() const;
  ::Protocol::PacketHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Protocol::PacketHeader* header);
  ::Protocol::PacketHeader* unsafe_arena_release_header();

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.EnterChatRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PacketHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class Packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() override;
  explicit constexpr Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kChatroomReq = 2,
    kChatroomAck = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return new Packet();
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kChatroomReqFieldNumber = 2,
    kChatroomAckFieldNumber = 3,
  };
  // .Protocol.PacketHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Protocol::PacketHeader& header() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::PacketHeader* release_header();
  ::Protocol::PacketHeader* mutable_header();
  void set_allocated_header(::Protocol::PacketHeader* header);
  private:
  const ::Protocol::PacketHeader& _internal_header() const;
  ::Protocol::PacketHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Protocol::PacketHeader* header);
  ::Protocol::PacketHeader* unsafe_arena_release_header();

  // .Protocol.EnterChatRoomReq chatroom_req = 2;
  bool has_chatroom_req() const;
  private:
  bool _internal_has_chatroom_req() const;
  public:
  void clear_chatroom_req();
  const ::Protocol::EnterChatRoomReq& chatroom_req() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::EnterChatRoomReq* release_chatroom_req();
  ::Protocol::EnterChatRoomReq* mutable_chatroom_req();
  void set_allocated_chatroom_req(::Protocol::EnterChatRoomReq* chatroom_req);
  private:
  const ::Protocol::EnterChatRoomReq& _internal_chatroom_req() const;
  ::Protocol::EnterChatRoomReq* _internal_mutable_chatroom_req();
  public:
  void unsafe_arena_set_allocated_chatroom_req(
      ::Protocol::EnterChatRoomReq* chatroom_req);
  ::Protocol::EnterChatRoomReq* unsafe_arena_release_chatroom_req();

  // .Protocol.EnterChatRoomAck chatroom_ack = 3;
  bool has_chatroom_ack() const;
  private:
  bool _internal_has_chatroom_ack() const;
  public:
  void clear_chatroom_ack();
  const ::Protocol::EnterChatRoomAck& chatroom_ack() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::EnterChatRoomAck* release_chatroom_ack();
  ::Protocol::EnterChatRoomAck* mutable_chatroom_ack();
  void set_allocated_chatroom_ack(::Protocol::EnterChatRoomAck* chatroom_ack);
  private:
  const ::Protocol::EnterChatRoomAck& _internal_chatroom_ack() const;
  ::Protocol::EnterChatRoomAck* _internal_mutable_chatroom_ack();
  public:
  void unsafe_arena_set_allocated_chatroom_ack(
      ::Protocol::EnterChatRoomAck* chatroom_ack);
  ::Protocol::EnterChatRoomAck* unsafe_arena_release_chatroom_ack();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:Protocol.Packet)
 private:
  class _Internal;
  void set_has_chatroom_req();
  void set_has_chatroom_ack();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PacketHeader* header_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::Protocol::EnterChatRoomReq* chatroom_req_;
    ::Protocol::EnterChatRoomAck* chatroom_ack_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketHeader

// uint32 packetType = 1;
inline void PacketHeader::clear_packettype() {
  packettype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::_internal_packettype() const {
  return packettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::packettype() const {
  // @@protoc_insertion_point(field_get:Protocol.PacketHeader.packetType)
  return _internal_packettype();
}
inline void PacketHeader::_internal_set_packettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packettype_ = value;
}
inline void PacketHeader::set_packettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packettype(value);
  // @@protoc_insertion_point(field_set:Protocol.PacketHeader.packetType)
}

// uint32 packetSize = 2;
inline void PacketHeader::clear_packetsize() {
  packetsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::_internal_packetsize() const {
  return packetsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::packetsize() const {
  // @@protoc_insertion_point(field_get:Protocol.PacketHeader.packetSize)
  return _internal_packetsize();
}
inline void PacketHeader::_internal_set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packetsize_ = value;
}
inline void PacketHeader::set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packetsize(value);
  // @@protoc_insertion_point(field_set:Protocol.PacketHeader.packetSize)
}

// uint32 seqNum = 3;
inline void PacketHeader::clear_seqnum() {
  seqnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::_internal_seqnum() const {
  return seqnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::seqnum() const {
  // @@protoc_insertion_point(field_get:Protocol.PacketHeader.seqNum)
  return _internal_seqnum();
}
inline void PacketHeader::_internal_set_seqnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seqnum_ = value;
}
inline void PacketHeader::set_seqnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:Protocol.PacketHeader.seqNum)
}

// -------------------------------------------------------------------

// EnterChatRoomReq

// .Protocol.PacketHeader header = 1;
inline bool EnterChatRoomReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool EnterChatRoomReq::has_header() const {
  return _internal_has_header();
}
inline void EnterChatRoomReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Protocol::PacketHeader& EnterChatRoomReq::_internal_header() const {
  const ::Protocol::PacketHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PacketHeader&>(
      ::Protocol::_PacketHeader_default_instance_);
}
inline const ::Protocol::PacketHeader& EnterChatRoomReq::header() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterChatRoomReq.header)
  return _internal_header();
}
inline void EnterChatRoomReq::unsafe_arena_set_allocated_header(
    ::Protocol::PacketHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.EnterChatRoomReq.header)
}
inline ::Protocol::PacketHeader* EnterChatRoomReq::release_header() {
  
  ::Protocol::PacketHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PacketHeader* EnterChatRoomReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Protocol.EnterChatRoomReq.header)
  
  ::Protocol::PacketHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Protocol::PacketHeader* EnterChatRoomReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PacketHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::Protocol::PacketHeader* EnterChatRoomReq::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Protocol.EnterChatRoomReq.header)
  return _internal_mutable_header();
}
inline void EnterChatRoomReq::set_allocated_header(::Protocol::PacketHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::PacketHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Protocol.EnterChatRoomReq.header)
}

// int32 message = 2;
inline void EnterChatRoomReq::clear_message() {
  message_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterChatRoomReq::_internal_message() const {
  return message_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterChatRoomReq::message() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterChatRoomReq.message)
  return _internal_message();
}
inline void EnterChatRoomReq::_internal_set_message(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_ = value;
}
inline void EnterChatRoomReq::set_message(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:Protocol.EnterChatRoomReq.message)
}

// int32 value = 3;
inline void EnterChatRoomReq::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterChatRoomReq::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterChatRoomReq::value() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterChatRoomReq.value)
  return _internal_value();
}
inline void EnterChatRoomReq::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void EnterChatRoomReq::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Protocol.EnterChatRoomReq.value)
}

// -------------------------------------------------------------------

// EnterChatRoomAck

// .Protocol.PacketHeader header = 1;
inline bool EnterChatRoomAck::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool EnterChatRoomAck::has_header() const {
  return _internal_has_header();
}
inline void EnterChatRoomAck::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Protocol::PacketHeader& EnterChatRoomAck::_internal_header() const {
  const ::Protocol::PacketHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PacketHeader&>(
      ::Protocol::_PacketHeader_default_instance_);
}
inline const ::Protocol::PacketHeader& EnterChatRoomAck::header() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterChatRoomAck.header)
  return _internal_header();
}
inline void EnterChatRoomAck::unsafe_arena_set_allocated_header(
    ::Protocol::PacketHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.EnterChatRoomAck.header)
}
inline ::Protocol::PacketHeader* EnterChatRoomAck::release_header() {
  
  ::Protocol::PacketHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PacketHeader* EnterChatRoomAck::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Protocol.EnterChatRoomAck.header)
  
  ::Protocol::PacketHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Protocol::PacketHeader* EnterChatRoomAck::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PacketHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::Protocol::PacketHeader* EnterChatRoomAck::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Protocol.EnterChatRoomAck.header)
  return _internal_mutable_header();
}
inline void EnterChatRoomAck::set_allocated_header(::Protocol::PacketHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::PacketHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Protocol.EnterChatRoomAck.header)
}

// uint32 id = 2;
inline void EnterChatRoomAck::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterChatRoomAck::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterChatRoomAck::id() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterChatRoomAck.id)
  return _internal_id();
}
inline void EnterChatRoomAck::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void EnterChatRoomAck::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.EnterChatRoomAck.id)
}

// -------------------------------------------------------------------

// Packet

// .Protocol.PacketHeader header = 1;
inline bool Packet::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Packet::has_header() const {
  return _internal_has_header();
}
inline void Packet::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Protocol::PacketHeader& Packet::_internal_header() const {
  const ::Protocol::PacketHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PacketHeader&>(
      ::Protocol::_PacketHeader_default_instance_);
}
inline const ::Protocol::PacketHeader& Packet::header() const {
  // @@protoc_insertion_point(field_get:Protocol.Packet.header)
  return _internal_header();
}
inline void Packet::unsafe_arena_set_allocated_header(
    ::Protocol::PacketHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Packet.header)
}
inline ::Protocol::PacketHeader* Packet::release_header() {
  
  ::Protocol::PacketHeader* temp = header_;
  header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::PacketHeader* Packet::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Protocol.Packet.header)
  
  ::Protocol::PacketHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Protocol::PacketHeader* Packet::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PacketHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::Protocol::PacketHeader* Packet::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Protocol.Packet.header)
  return _internal_mutable_header();
}
inline void Packet::set_allocated_header(::Protocol::PacketHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::PacketHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Protocol.Packet.header)
}

// .Protocol.EnterChatRoomReq chatroom_req = 2;
inline bool Packet::_internal_has_chatroom_req() const {
  return payload_case() == kChatroomReq;
}
inline bool Packet::has_chatroom_req() const {
  return _internal_has_chatroom_req();
}
inline void Packet::set_has_chatroom_req() {
  _oneof_case_[0] = kChatroomReq;
}
inline void Packet::clear_chatroom_req() {
  if (_internal_has_chatroom_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.chatroom_req_;
    }
    clear_has_payload();
  }
}
inline ::Protocol::EnterChatRoomReq* Packet::release_chatroom_req() {
  // @@protoc_insertion_point(field_release:Protocol.Packet.chatroom_req)
  if (_internal_has_chatroom_req()) {
    clear_has_payload();
      ::Protocol::EnterChatRoomReq* temp = payload_.chatroom_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.chatroom_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Protocol::EnterChatRoomReq& Packet::_internal_chatroom_req() const {
  return _internal_has_chatroom_req()
      ? *payload_.chatroom_req_
      : reinterpret_cast< ::Protocol::EnterChatRoomReq&>(::Protocol::_EnterChatRoomReq_default_instance_);
}
inline const ::Protocol::EnterChatRoomReq& Packet::chatroom_req() const {
  // @@protoc_insertion_point(field_get:Protocol.Packet.chatroom_req)
  return _internal_chatroom_req();
}
inline ::Protocol::EnterChatRoomReq* Packet::unsafe_arena_release_chatroom_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Protocol.Packet.chatroom_req)
  if (_internal_has_chatroom_req()) {
    clear_has_payload();
    ::Protocol::EnterChatRoomReq* temp = payload_.chatroom_req_;
    payload_.chatroom_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_chatroom_req(::Protocol::EnterChatRoomReq* chatroom_req) {
  clear_payload();
  if (chatroom_req) {
    set_has_chatroom_req();
    payload_.chatroom_req_ = chatroom_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Packet.chatroom_req)
}
inline ::Protocol::EnterChatRoomReq* Packet::_internal_mutable_chatroom_req() {
  if (!_internal_has_chatroom_req()) {
    clear_payload();
    set_has_chatroom_req();
    payload_.chatroom_req_ = CreateMaybeMessage< ::Protocol::EnterChatRoomReq >(GetArenaForAllocation());
  }
  return payload_.chatroom_req_;
}
inline ::Protocol::EnterChatRoomReq* Packet::mutable_chatroom_req() {
  // @@protoc_insertion_point(field_mutable:Protocol.Packet.chatroom_req)
  return _internal_mutable_chatroom_req();
}

// .Protocol.EnterChatRoomAck chatroom_ack = 3;
inline bool Packet::_internal_has_chatroom_ack() const {
  return payload_case() == kChatroomAck;
}
inline bool Packet::has_chatroom_ack() const {
  return _internal_has_chatroom_ack();
}
inline void Packet::set_has_chatroom_ack() {
  _oneof_case_[0] = kChatroomAck;
}
inline void Packet::clear_chatroom_ack() {
  if (_internal_has_chatroom_ack()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.chatroom_ack_;
    }
    clear_has_payload();
  }
}
inline ::Protocol::EnterChatRoomAck* Packet::release_chatroom_ack() {
  // @@protoc_insertion_point(field_release:Protocol.Packet.chatroom_ack)
  if (_internal_has_chatroom_ack()) {
    clear_has_payload();
      ::Protocol::EnterChatRoomAck* temp = payload_.chatroom_ack_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.chatroom_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Protocol::EnterChatRoomAck& Packet::_internal_chatroom_ack() const {
  return _internal_has_chatroom_ack()
      ? *payload_.chatroom_ack_
      : reinterpret_cast< ::Protocol::EnterChatRoomAck&>(::Protocol::_EnterChatRoomAck_default_instance_);
}
inline const ::Protocol::EnterChatRoomAck& Packet::chatroom_ack() const {
  // @@protoc_insertion_point(field_get:Protocol.Packet.chatroom_ack)
  return _internal_chatroom_ack();
}
inline ::Protocol::EnterChatRoomAck* Packet::unsafe_arena_release_chatroom_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Protocol.Packet.chatroom_ack)
  if (_internal_has_chatroom_ack()) {
    clear_has_payload();
    ::Protocol::EnterChatRoomAck* temp = payload_.chatroom_ack_;
    payload_.chatroom_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_chatroom_ack(::Protocol::EnterChatRoomAck* chatroom_ack) {
  clear_payload();
  if (chatroom_ack) {
    set_has_chatroom_ack();
    payload_.chatroom_ack_ = chatroom_ack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Packet.chatroom_ack)
}
inline ::Protocol::EnterChatRoomAck* Packet::_internal_mutable_chatroom_ack() {
  if (!_internal_has_chatroom_ack()) {
    clear_payload();
    set_has_chatroom_ack();
    payload_.chatroom_ack_ = CreateMaybeMessage< ::Protocol::EnterChatRoomAck >(GetArenaForAllocation());
  }
  return payload_.chatroom_ack_;
}
inline ::Protocol::EnterChatRoomAck* Packet::mutable_chatroom_ack() {
  // @@protoc_insertion_point(field_mutable:Protocol.Packet.chatroom_ack)
  return _internal_mutable_chatroom_ack();
}

inline bool Packet::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Packet::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Packet::PayloadCase Packet::payload_case() const {
  return Packet::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PacketType>() {
  return ::Protocol::PacketType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
