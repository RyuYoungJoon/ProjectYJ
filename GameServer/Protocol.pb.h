// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class ChatAck;
struct ChatAckDefaultTypeInternal;
extern ChatAckDefaultTypeInternal _ChatAck_default_instance_;
class ChatReq;
struct ChatReqDefaultTypeInternal;
extern ChatReqDefaultTypeInternal _ChatReq_default_instance_;
class ChatRoomListAck;
struct ChatRoomListAckDefaultTypeInternal;
extern ChatRoomListAckDefaultTypeInternal _ChatRoomListAck_default_instance_;
class ChatRoomListReq;
struct ChatRoomListReqDefaultTypeInternal;
extern ChatRoomListReqDefaultTypeInternal _ChatRoomListReq_default_instance_;
class CreateChatRoomAck;
struct CreateChatRoomAckDefaultTypeInternal;
extern CreateChatRoomAckDefaultTypeInternal _CreateChatRoomAck_default_instance_;
class CreateChatRoomReq;
struct CreateChatRoomReqDefaultTypeInternal;
extern CreateChatRoomReqDefaultTypeInternal _CreateChatRoomReq_default_instance_;
class EnterChatRoomAck;
struct EnterChatRoomAckDefaultTypeInternal;
extern EnterChatRoomAckDefaultTypeInternal _EnterChatRoomAck_default_instance_;
class EnterChatRoomReq;
struct EnterChatRoomReqDefaultTypeInternal;
extern EnterChatRoomReqDefaultTypeInternal _EnterChatRoomReq_default_instance_;
class LoginAck;
struct LoginAckDefaultTypeInternal;
extern LoginAckDefaultTypeInternal _LoginAck_default_instance_;
class LoginReq;
struct LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class RefreshChatRoomAck;
struct RefreshChatRoomAckDefaultTypeInternal;
extern RefreshChatRoomAckDefaultTypeInternal _RefreshChatRoomAck_default_instance_;
class RefreshChatRoomReq;
struct RefreshChatRoomReqDefaultTypeInternal;
extern RefreshChatRoomReqDefaultTypeInternal _RefreshChatRoomReq_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::ChatAck* Arena::CreateMaybeMessage<::Protocol::ChatAck>(Arena*);
template<> ::Protocol::ChatReq* Arena::CreateMaybeMessage<::Protocol::ChatReq>(Arena*);
template<> ::Protocol::ChatRoomListAck* Arena::CreateMaybeMessage<::Protocol::ChatRoomListAck>(Arena*);
template<> ::Protocol::ChatRoomListReq* Arena::CreateMaybeMessage<::Protocol::ChatRoomListReq>(Arena*);
template<> ::Protocol::CreateChatRoomAck* Arena::CreateMaybeMessage<::Protocol::CreateChatRoomAck>(Arena*);
template<> ::Protocol::CreateChatRoomReq* Arena::CreateMaybeMessage<::Protocol::CreateChatRoomReq>(Arena*);
template<> ::Protocol::EnterChatRoomAck* Arena::CreateMaybeMessage<::Protocol::EnterChatRoomAck>(Arena*);
template<> ::Protocol::EnterChatRoomReq* Arena::CreateMaybeMessage<::Protocol::EnterChatRoomReq>(Arena*);
template<> ::Protocol::LoginAck* Arena::CreateMaybeMessage<::Protocol::LoginAck>(Arena*);
template<> ::Protocol::LoginReq* Arena::CreateMaybeMessage<::Protocol::LoginReq>(Arena*);
template<> ::Protocol::RefreshChatRoomAck* Arena::CreateMaybeMessage<::Protocol::RefreshChatRoomAck>(Arena*);
template<> ::Protocol::RefreshChatRoomReq* Arena::CreateMaybeMessage<::Protocol::RefreshChatRoomReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class EnterChatRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.EnterChatRoomReq) */ {
 public:
  inline EnterChatRoomReq() : EnterChatRoomReq(nullptr) {}
  ~EnterChatRoomReq() override;
  explicit constexpr EnterChatRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterChatRoomReq(const EnterChatRoomReq& from);
  EnterChatRoomReq(EnterChatRoomReq&& from) noexcept
    : EnterChatRoomReq() {
    *this = ::std::move(from);
  }

  inline EnterChatRoomReq& operator=(const EnterChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterChatRoomReq& operator=(EnterChatRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterChatRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterChatRoomReq* internal_default_instance() {
    return reinterpret_cast<const EnterChatRoomReq*>(
               &_EnterChatRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnterChatRoomReq& a, EnterChatRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterChatRoomReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterChatRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterChatRoomReq* New() const final {
    return new EnterChatRoomReq();
  }

  EnterChatRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterChatRoomReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterChatRoomReq& from);
  void MergeFrom(const EnterChatRoomReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterChatRoomReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.EnterChatRoomReq";
  }
  protected:
  explicit EnterChatRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 1,
  };
  // int32 roomID = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.EnterChatRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class EnterChatRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.EnterChatRoomAck) */ {
 public:
  inline EnterChatRoomAck() : EnterChatRoomAck(nullptr) {}
  ~EnterChatRoomAck() override;
  explicit constexpr EnterChatRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterChatRoomAck(const EnterChatRoomAck& from);
  EnterChatRoomAck(EnterChatRoomAck&& from) noexcept
    : EnterChatRoomAck() {
    *this = ::std::move(from);
  }

  inline EnterChatRoomAck& operator=(const EnterChatRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterChatRoomAck& operator=(EnterChatRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterChatRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterChatRoomAck* internal_default_instance() {
    return reinterpret_cast<const EnterChatRoomAck*>(
               &_EnterChatRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnterChatRoomAck& a, EnterChatRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterChatRoomAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterChatRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterChatRoomAck* New() const final {
    return new EnterChatRoomAck();
  }

  EnterChatRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterChatRoomAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterChatRoomAck& from);
  void MergeFrom(const EnterChatRoomAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterChatRoomAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.EnterChatRoomAck";
  }
  protected:
  explicit EnterChatRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 2,
    kRoomIDFieldNumber = 1,
  };
  // string roomName = 2;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // uint32 roomID = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.EnterChatRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class LoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  ~LoginReq() override;
  explicit constexpr LoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return new LoginReq();
  }

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class LoginAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LoginAck) */ {
 public:
  inline LoginAck() : LoginAck(nullptr) {}
  ~LoginAck() override;
  explicit constexpr LoginAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginAck(const LoginAck& from);
  LoginAck(LoginAck&& from) noexcept
    : LoginAck() {
    *this = ::std::move(from);
  }

  inline LoginAck& operator=(const LoginAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAck& operator=(LoginAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginAck* internal_default_instance() {
    return reinterpret_cast<const LoginAck*>(
               &_LoginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginAck& a, LoginAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginAck* New() const final {
    return new LoginAck();
  }

  LoginAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginAck& from);
  void MergeFrom(const LoginAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LoginAck";
  }
  protected:
  explicit LoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string userID = 2;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.LoginAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class ChatRoomListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ChatRoomListReq) */ {
 public:
  inline ChatRoomListReq() : ChatRoomListReq(nullptr) {}
  ~ChatRoomListReq() override;
  explicit constexpr ChatRoomListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatRoomListReq(const ChatRoomListReq& from);
  ChatRoomListReq(ChatRoomListReq&& from) noexcept
    : ChatRoomListReq() {
    *this = ::std::move(from);
  }

  inline ChatRoomListReq& operator=(const ChatRoomListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRoomListReq& operator=(ChatRoomListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatRoomListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatRoomListReq* internal_default_instance() {
    return reinterpret_cast<const ChatRoomListReq*>(
               &_ChatRoomListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChatRoomListReq& a, ChatRoomListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRoomListReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatRoomListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatRoomListReq* New() const final {
    return new ChatRoomListReq();
  }

  ChatRoomListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatRoomListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatRoomListReq& from);
  void MergeFrom(const ChatRoomListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatRoomListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ChatRoomListReq";
  }
  protected:
  explicit ChatRoomListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ChatRoomListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class ChatRoomListAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ChatRoomListAck) */ {
 public:
  inline ChatRoomListAck() : ChatRoomListAck(nullptr) {}
  ~ChatRoomListAck() override;
  explicit constexpr ChatRoomListAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatRoomListAck(const ChatRoomListAck& from);
  ChatRoomListAck(ChatRoomListAck&& from) noexcept
    : ChatRoomListAck() {
    *this = ::std::move(from);
  }

  inline ChatRoomListAck& operator=(const ChatRoomListAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRoomListAck& operator=(ChatRoomListAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatRoomListAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatRoomListAck* internal_default_instance() {
    return reinterpret_cast<const ChatRoomListAck*>(
               &_ChatRoomListAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChatRoomListAck& a, ChatRoomListAck& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRoomListAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatRoomListAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatRoomListAck* New() const final {
    return new ChatRoomListAck();
  }

  ChatRoomListAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatRoomListAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatRoomListAck& from);
  void MergeFrom(const ChatRoomListAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatRoomListAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ChatRoomListAck";
  }
  protected:
  explicit ChatRoomListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatroomInfoFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.ChatRoomInfo chatroomInfo = 2;
  int chatroominfo_size() const;
  private:
  int _internal_chatroominfo_size() const;
  public:
  void clear_chatroominfo();
  ::Protocol::ChatRoomInfo* mutable_chatroominfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChatRoomInfo >*
      mutable_chatroominfo();
  private:
  const ::Protocol::ChatRoomInfo& _internal_chatroominfo(int index) const;
  ::Protocol::ChatRoomInfo* _internal_add_chatroominfo();
  public:
  const ::Protocol::ChatRoomInfo& chatroominfo(int index) const;
  ::Protocol::ChatRoomInfo* add_chatroominfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChatRoomInfo >&
      chatroominfo() const;

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ChatRoomListAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChatRoomInfo > chatroominfo_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CreateChatRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CreateChatRoomReq) */ {
 public:
  inline CreateChatRoomReq() : CreateChatRoomReq(nullptr) {}
  ~CreateChatRoomReq() override;
  explicit constexpr CreateChatRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChatRoomReq(const CreateChatRoomReq& from);
  CreateChatRoomReq(CreateChatRoomReq&& from) noexcept
    : CreateChatRoomReq() {
    *this = ::std::move(from);
  }

  inline CreateChatRoomReq& operator=(const CreateChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChatRoomReq& operator=(CreateChatRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChatRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChatRoomReq* internal_default_instance() {
    return reinterpret_cast<const CreateChatRoomReq*>(
               &_CreateChatRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateChatRoomReq& a, CreateChatRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChatRoomReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChatRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChatRoomReq* New() const final {
    return new CreateChatRoomReq();
  }

  CreateChatRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChatRoomReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateChatRoomReq& from);
  void MergeFrom(const CreateChatRoomReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChatRoomReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CreateChatRoomReq";
  }
  protected:
  explicit CreateChatRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
  };
  // string roomName = 1;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CreateChatRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CreateChatRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CreateChatRoomAck) */ {
 public:
  inline CreateChatRoomAck() : CreateChatRoomAck(nullptr) {}
  ~CreateChatRoomAck() override;
  explicit constexpr CreateChatRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChatRoomAck(const CreateChatRoomAck& from);
  CreateChatRoomAck(CreateChatRoomAck&& from) noexcept
    : CreateChatRoomAck() {
    *this = ::std::move(from);
  }

  inline CreateChatRoomAck& operator=(const CreateChatRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChatRoomAck& operator=(CreateChatRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChatRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChatRoomAck* internal_default_instance() {
    return reinterpret_cast<const CreateChatRoomAck*>(
               &_CreateChatRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateChatRoomAck& a, CreateChatRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChatRoomAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChatRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChatRoomAck* New() const final {
    return new CreateChatRoomAck();
  }

  CreateChatRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChatRoomAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateChatRoomAck& from);
  void MergeFrom(const CreateChatRoomAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChatRoomAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CreateChatRoomAck";
  }
  protected:
  explicit CreateChatRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.CreateChatRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class RefreshChatRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.RefreshChatRoomReq) */ {
 public:
  inline RefreshChatRoomReq() : RefreshChatRoomReq(nullptr) {}
  ~RefreshChatRoomReq() override;
  explicit constexpr RefreshChatRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RefreshChatRoomReq(const RefreshChatRoomReq& from);
  RefreshChatRoomReq(RefreshChatRoomReq&& from) noexcept
    : RefreshChatRoomReq() {
    *this = ::std::move(from);
  }

  inline RefreshChatRoomReq& operator=(const RefreshChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshChatRoomReq& operator=(RefreshChatRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RefreshChatRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RefreshChatRoomReq* internal_default_instance() {
    return reinterpret_cast<const RefreshChatRoomReq*>(
               &_RefreshChatRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RefreshChatRoomReq& a, RefreshChatRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshChatRoomReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshChatRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshChatRoomReq* New() const final {
    return new RefreshChatRoomReq();
  }

  RefreshChatRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshChatRoomReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshChatRoomReq& from);
  void MergeFrom(const RefreshChatRoomReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshChatRoomReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.RefreshChatRoomReq";
  }
  protected:
  explicit RefreshChatRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.RefreshChatRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class RefreshChatRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.RefreshChatRoomAck) */ {
 public:
  inline RefreshChatRoomAck() : RefreshChatRoomAck(nullptr) {}
  ~RefreshChatRoomAck() override;
  explicit constexpr RefreshChatRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RefreshChatRoomAck(const RefreshChatRoomAck& from);
  RefreshChatRoomAck(RefreshChatRoomAck&& from) noexcept
    : RefreshChatRoomAck() {
    *this = ::std::move(from);
  }

  inline RefreshChatRoomAck& operator=(const RefreshChatRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshChatRoomAck& operator=(RefreshChatRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RefreshChatRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const RefreshChatRoomAck* internal_default_instance() {
    return reinterpret_cast<const RefreshChatRoomAck*>(
               &_RefreshChatRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RefreshChatRoomAck& a, RefreshChatRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshChatRoomAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshChatRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshChatRoomAck* New() const final {
    return new RefreshChatRoomAck();
  }

  RefreshChatRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshChatRoomAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshChatRoomAck& from);
  void MergeFrom(const RefreshChatRoomAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshChatRoomAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.RefreshChatRoomAck";
  }
  protected:
  explicit RefreshChatRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.RefreshChatRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class ChatReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ChatReq) */ {
 public:
  inline ChatReq() : ChatReq(nullptr) {}
  ~ChatReq() override;
  explicit constexpr ChatReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatReq(const ChatReq& from);
  ChatReq(ChatReq&& from) noexcept
    : ChatReq() {
    *this = ::std::move(from);
  }

  inline ChatReq& operator=(const ChatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatReq& operator=(ChatReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatReq* internal_default_instance() {
    return reinterpret_cast<const ChatReq*>(
               &_ChatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ChatReq& a, ChatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatReq* New() const final {
    return new ChatReq();
  }

  ChatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatReq& from);
  void MergeFrom(const ChatReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ChatReq";
  }
  protected:
  explicit ChatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSessionUIDFieldNumber = 1,
    kRoomIDFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 sessionUID = 1;
  void clear_sessionuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sessionuid() const;
  void set_sessionuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sessionuid() const;
  void _internal_set_sessionuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 roomID = 3;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ChatReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sessionuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class ChatAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ChatAck) */ {
 public:
  inline ChatAck() : ChatAck(nullptr) {}
  ~ChatAck() override;
  explicit constexpr ChatAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatAck(const ChatAck& from);
  ChatAck(ChatAck&& from) noexcept
    : ChatAck() {
    *this = ::std::move(from);
  }

  inline ChatAck& operator=(const ChatAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatAck& operator=(ChatAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatAck* internal_default_instance() {
    return reinterpret_cast<const ChatAck*>(
               &_ChatAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChatAck& a, ChatAck& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatAck* New() const final {
    return new ChatAck();
  }

  ChatAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatAck& from);
  void MergeFrom(const ChatAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ChatAck";
  }
  protected:
  explicit ChatAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string sender = 1;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ChatAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnterChatRoomReq

// int32 roomID = 1;
inline void EnterChatRoomReq::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterChatRoomReq::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterChatRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterChatRoomReq.roomID)
  return _internal_roomid();
}
inline void EnterChatRoomReq::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void EnterChatRoomReq::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.EnterChatRoomReq.roomID)
}

// -------------------------------------------------------------------

// EnterChatRoomAck

// uint32 roomID = 1;
inline void EnterChatRoomAck::clear_roomid() {
  roomid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterChatRoomAck::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterChatRoomAck::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterChatRoomAck.roomID)
  return _internal_roomid();
}
inline void EnterChatRoomAck::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roomid_ = value;
}
inline void EnterChatRoomAck::set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.EnterChatRoomAck.roomID)
}

// string roomName = 2;
inline void EnterChatRoomAck::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& EnterChatRoomAck::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.EnterChatRoomAck.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnterChatRoomAck::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.EnterChatRoomAck.roomName)
}
inline std::string* EnterChatRoomAck::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:Protocol.EnterChatRoomAck.roomName)
  return _internal_mutable_roomname();
}
inline const std::string& EnterChatRoomAck::_internal_roomname() const {
  return roomname_.Get();
}
inline void EnterChatRoomAck::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnterChatRoomAck::_internal_mutable_roomname() {
  
  return roomname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnterChatRoomAck::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.EnterChatRoomAck.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnterChatRoomAck::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.EnterChatRoomAck.roomName)
}

// -------------------------------------------------------------------

// LoginReq

// string id = 1;
inline void LoginReq::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& LoginReq::id() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginReq.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.LoginReq.id)
}
inline std::string* LoginReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.LoginReq.id)
  return _internal_mutable_id();
}
inline const std::string& LoginReq::_internal_id() const {
  return id_.Get();
}
inline void LoginReq::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginReq::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.LoginReq.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.LoginReq.id)
}

// string password = 2;
inline void LoginReq::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.LoginReq.password)
}
inline std::string* LoginReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Protocol.LoginReq.password)
  return _internal_mutable_password();
}
inline const std::string& LoginReq::_internal_password() const {
  return password_.Get();
}
inline void LoginReq::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.LoginReq.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.LoginReq.password)
}

// -------------------------------------------------------------------

// LoginAck

// bool success = 1;
inline void LoginAck::clear_success() {
  success_ = false;
}
inline bool LoginAck::_internal_success() const {
  return success_;
}
inline bool LoginAck::success() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginAck.success)
  return _internal_success();
}
inline void LoginAck::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void LoginAck::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.LoginAck.success)
}

// string userID = 2;
inline void LoginAck::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& LoginAck::userid() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginAck.userID)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginAck::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.LoginAck.userID)
}
inline std::string* LoginAck::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:Protocol.LoginAck.userID)
  return _internal_mutable_userid();
}
inline const std::string& LoginAck::_internal_userid() const {
  return userid_.Get();
}
inline void LoginAck::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginAck::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginAck::release_userid() {
  // @@protoc_insertion_point(field_release:Protocol.LoginAck.userID)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginAck::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.LoginAck.userID)
}

// -------------------------------------------------------------------

// ChatRoomListReq

// bool success = 1;
inline void ChatRoomListReq::clear_success() {
  success_ = false;
}
inline bool ChatRoomListReq::_internal_success() const {
  return success_;
}
inline bool ChatRoomListReq::success() const {
  // @@protoc_insertion_point(field_get:Protocol.ChatRoomListReq.success)
  return _internal_success();
}
inline void ChatRoomListReq::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ChatRoomListReq::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.ChatRoomListReq.success)
}

// -------------------------------------------------------------------

// ChatRoomListAck

// bool success = 1;
inline void ChatRoomListAck::clear_success() {
  success_ = false;
}
inline bool ChatRoomListAck::_internal_success() const {
  return success_;
}
inline bool ChatRoomListAck::success() const {
  // @@protoc_insertion_point(field_get:Protocol.ChatRoomListAck.success)
  return _internal_success();
}
inline void ChatRoomListAck::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ChatRoomListAck::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.ChatRoomListAck.success)
}

// repeated .Protocol.ChatRoomInfo chatroomInfo = 2;
inline int ChatRoomListAck::_internal_chatroominfo_size() const {
  return chatroominfo_.size();
}
inline int ChatRoomListAck::chatroominfo_size() const {
  return _internal_chatroominfo_size();
}
inline ::Protocol::ChatRoomInfo* ChatRoomListAck::mutable_chatroominfo(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.ChatRoomListAck.chatroomInfo)
  return chatroominfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChatRoomInfo >*
ChatRoomListAck::mutable_chatroominfo() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.ChatRoomListAck.chatroomInfo)
  return &chatroominfo_;
}
inline const ::Protocol::ChatRoomInfo& ChatRoomListAck::_internal_chatroominfo(int index) const {
  return chatroominfo_.Get(index);
}
inline const ::Protocol::ChatRoomInfo& ChatRoomListAck::chatroominfo(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.ChatRoomListAck.chatroomInfo)
  return _internal_chatroominfo(index);
}
inline ::Protocol::ChatRoomInfo* ChatRoomListAck::_internal_add_chatroominfo() {
  return chatroominfo_.Add();
}
inline ::Protocol::ChatRoomInfo* ChatRoomListAck::add_chatroominfo() {
  // @@protoc_insertion_point(field_add:Protocol.ChatRoomListAck.chatroomInfo)
  return _internal_add_chatroominfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChatRoomInfo >&
ChatRoomListAck::chatroominfo() const {
  // @@protoc_insertion_point(field_list:Protocol.ChatRoomListAck.chatroomInfo)
  return chatroominfo_;
}

// -------------------------------------------------------------------

// CreateChatRoomReq

// string roomName = 1;
inline void CreateChatRoomReq::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& CreateChatRoomReq::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.CreateChatRoomReq.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateChatRoomReq::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CreateChatRoomReq.roomName)
}
inline std::string* CreateChatRoomReq::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:Protocol.CreateChatRoomReq.roomName)
  return _internal_mutable_roomname();
}
inline const std::string& CreateChatRoomReq::_internal_roomname() const {
  return roomname_.Get();
}
inline void CreateChatRoomReq::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateChatRoomReq::_internal_mutable_roomname() {
  
  return roomname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateChatRoomReq::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.CreateChatRoomReq.roomName)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateChatRoomReq::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.CreateChatRoomReq.roomName)
}

// -------------------------------------------------------------------

// CreateChatRoomAck

// -------------------------------------------------------------------

// RefreshChatRoomReq

// -------------------------------------------------------------------

// RefreshChatRoomAck

// -------------------------------------------------------------------

// ChatReq

// uint32 sessionUID = 1;
inline void ChatReq::clear_sessionuid() {
  sessionuid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatReq::_internal_sessionuid() const {
  return sessionuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatReq::sessionuid() const {
  // @@protoc_insertion_point(field_get:Protocol.ChatReq.sessionUID)
  return _internal_sessionuid();
}
inline void ChatReq::_internal_set_sessionuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sessionuid_ = value;
}
inline void ChatReq::set_sessionuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sessionuid(value);
  // @@protoc_insertion_point(field_set:Protocol.ChatReq.sessionUID)
}

// string message = 2;
inline void ChatReq::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ChatReq::message() const {
  // @@protoc_insertion_point(field_get:Protocol.ChatReq.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatReq::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ChatReq.message)
}
inline std::string* ChatReq::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Protocol.ChatReq.message)
  return _internal_mutable_message();
}
inline const std::string& ChatReq::_internal_message() const {
  return message_.Get();
}
inline void ChatReq::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatReq::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatReq::release_message() {
  // @@protoc_insertion_point(field_release:Protocol.ChatReq.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatReq::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ChatReq.message)
}

// uint32 roomID = 3;
inline void ChatReq::clear_roomid() {
  roomid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatReq::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatReq::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.ChatReq.roomID)
  return _internal_roomid();
}
inline void ChatReq::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roomid_ = value;
}
inline void ChatReq::set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.ChatReq.roomID)
}

// -------------------------------------------------------------------

// ChatAck

// string sender = 1;
inline void ChatAck::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& ChatAck::sender() const {
  // @@protoc_insertion_point(field_get:Protocol.ChatAck.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatAck::set_sender(ArgT0&& arg0, ArgT... args) {
 
 sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ChatAck.sender)
}
inline std::string* ChatAck::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:Protocol.ChatAck.sender)
  return _internal_mutable_sender();
}
inline const std::string& ChatAck::_internal_sender() const {
  return sender_.Get();
}
inline void ChatAck::_internal_set_sender(const std::string& value) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatAck::_internal_mutable_sender() {
  
  return sender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatAck::release_sender() {
  // @@protoc_insertion_point(field_release:Protocol.ChatAck.sender)
  return sender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatAck::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ChatAck.sender)
}

// string message = 2;
inline void ChatAck::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ChatAck::message() const {
  // @@protoc_insertion_point(field_get:Protocol.ChatAck.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatAck::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ChatAck.message)
}
inline std::string* ChatAck::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Protocol.ChatAck.message)
  return _internal_mutable_message();
}
inline const std::string& ChatAck::_internal_message() const {
  return message_.Get();
}
inline void ChatAck::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatAck::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatAck::release_message() {
  // @@protoc_insertion_point(field_release:Protocol.ChatAck.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatAck::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ChatAck.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
